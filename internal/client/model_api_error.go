/*
Exasol SaaS REST-API

## Authentication  The REST API can be used with your Personal Access Token (PAT). You don't know what a PAT is, check our documentation  [here](https://docs.exasol.com/saas/administration/access_mngt/access_token.htm).  After you created a PAT click on Authorize and add your PAT under BearerAuth.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// APIError struct for APIError
type APIError struct {
	Code      int32            `json:"code"`
	Message   string           `json:"message"`
	Causes    *map[string]bool `json:"causes,omitempty"`
	RequestID *string          `json:"requestID,omitempty"`
	Timestamp *string          `json:"timestamp,omitempty"`
	ApiID     *string          `json:"apiID,omitempty"`
}

// NewAPIError instantiates a new APIError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIError(code int32, message string) *APIError {
	this := APIError{}
	this.Code = code
	this.Message = message
	return &this
}

// NewAPIErrorWithDefaults instantiates a new APIError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIErrorWithDefaults() *APIError {
	this := APIError{}
	return &this
}

// GetCode returns the Code field value
func (o *APIError) GetCode() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *APIError) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *APIError) SetCode(v int32) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *APIError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *APIError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *APIError) SetMessage(v string) {
	o.Message = v
}

// GetCauses returns the Causes field value if set, zero value otherwise.
func (o *APIError) GetCauses() map[string]bool {
	if o == nil || o.Causes == nil {
		var ret map[string]bool
		return ret
	}
	return *o.Causes
}

// GetCausesOk returns a tuple with the Causes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIError) GetCausesOk() (*map[string]bool, bool) {
	if o == nil || o.Causes == nil {
		return nil, false
	}
	return o.Causes, true
}

// HasCauses returns a boolean if a field has been set.
func (o *APIError) HasCauses() bool {
	if o != nil && o.Causes != nil {
		return true
	}

	return false
}

// SetCauses gets a reference to the given map[string]bool and assigns it to the Causes field.
func (o *APIError) SetCauses(v map[string]bool) {
	o.Causes = &v
}

// GetRequestID returns the RequestID field value if set, zero value otherwise.
func (o *APIError) GetRequestID() string {
	if o == nil || o.RequestID == nil {
		var ret string
		return ret
	}
	return *o.RequestID
}

// GetRequestIDOk returns a tuple with the RequestID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIError) GetRequestIDOk() (*string, bool) {
	if o == nil || o.RequestID == nil {
		return nil, false
	}
	return o.RequestID, true
}

// HasRequestID returns a boolean if a field has been set.
func (o *APIError) HasRequestID() bool {
	if o != nil && o.RequestID != nil {
		return true
	}

	return false
}

// SetRequestID gets a reference to the given string and assigns it to the RequestID field.
func (o *APIError) SetRequestID(v string) {
	o.RequestID = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *APIError) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIError) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *APIError) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *APIError) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetApiID returns the ApiID field value if set, zero value otherwise.
func (o *APIError) GetApiID() string {
	if o == nil || o.ApiID == nil {
		var ret string
		return ret
	}
	return *o.ApiID
}

// GetApiIDOk returns a tuple with the ApiID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIError) GetApiIDOk() (*string, bool) {
	if o == nil || o.ApiID == nil {
		return nil, false
	}
	return o.ApiID, true
}

// HasApiID returns a boolean if a field has been set.
func (o *APIError) HasApiID() bool {
	if o != nil && o.ApiID != nil {
		return true
	}

	return false
}

// SetApiID gets a reference to the given string and assigns it to the ApiID field.
func (o *APIError) SetApiID(v string) {
	o.ApiID = &v
}

func (o APIError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["code"] = o.Code
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if o.Causes != nil {
		toSerialize["causes"] = o.Causes
	}
	if o.RequestID != nil {
		toSerialize["requestID"] = o.RequestID
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.ApiID != nil {
		toSerialize["apiID"] = o.ApiID
	}
	return json.Marshal(toSerialize)
}

type NullableAPIError struct {
	value *APIError
	isSet bool
}

func (v NullableAPIError) Get() *APIError {
	return v.value
}

func (v *NullableAPIError) Set(val *APIError) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIError) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIError(val *APIError) *NullableAPIError {
	return &NullableAPIError{value: val, isSet: true}
}

func (v NullableAPIError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
