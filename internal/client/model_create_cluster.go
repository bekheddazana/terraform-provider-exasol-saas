/*
Exasol SaaS REST-API

## Authentication  The REST API can be used with your Personal Access Token (PAT). You don't know what a PAT is, check our documentation  [here](https://docs.exasol.com/saas/administration/access_mngt/access_token.htm).  After you created a PAT click on Authorize and add your PAT under BearerAuth.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateCluster struct for CreateCluster
type CreateCluster struct {
	Name     string    `json:"name"`
	Size     string    `json:"size"`
	AutoStop *AutoStop `json:"autoStop,omitempty"`
}

// NewCreateCluster instantiates a new CreateCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCluster(name string, size string) *CreateCluster {
	this := CreateCluster{}
	this.Name = name
	this.Size = size
	return &this
}

// NewCreateClusterWithDefaults instantiates a new CreateCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateClusterWithDefaults() *CreateCluster {
	this := CreateCluster{}
	return &this
}

// GetName returns the Name field value
func (o *CreateCluster) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateCluster) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateCluster) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *CreateCluster) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *CreateCluster) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *CreateCluster) SetSize(v string) {
	o.Size = v
}

// GetAutoStop returns the AutoStop field value if set, zero value otherwise.
func (o *CreateCluster) GetAutoStop() AutoStop {
	if o == nil || o.AutoStop == nil {
		var ret AutoStop
		return ret
	}
	return *o.AutoStop
}

// GetAutoStopOk returns a tuple with the AutoStop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCluster) GetAutoStopOk() (*AutoStop, bool) {
	if o == nil || o.AutoStop == nil {
		return nil, false
	}
	return o.AutoStop, true
}

// HasAutoStop returns a boolean if a field has been set.
func (o *CreateCluster) HasAutoStop() bool {
	if o != nil && o.AutoStop != nil {
		return true
	}

	return false
}

// SetAutoStop gets a reference to the given AutoStop and assigns it to the AutoStop field.
func (o *CreateCluster) SetAutoStop(v AutoStop) {
	o.AutoStop = &v
}

func (o CreateCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["size"] = o.Size
	}
	if o.AutoStop != nil {
		toSerialize["autoStop"] = o.AutoStop
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCluster struct {
	value *CreateCluster
	isSet bool
}

func (v NullableCreateCluster) Get() *CreateCluster {
	return v.value
}

func (v *NullableCreateCluster) Set(val *CreateCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCluster(val *CreateCluster) *NullableCreateCluster {
	return &NullableCreateCluster{value: val, isSet: true}
}

func (v NullableCreateCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
