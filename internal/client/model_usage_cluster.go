/*
Exasol SaaS REST-API

## Authentication  The REST API can be used with your Personal Access Token (PAT). You don't know what a PAT is, check our documentation  [here](https://docs.exasol.com/saas/administration/access_mngt/access_token.htm).  After you created a PAT click on Authorize and add your PAT under BearerAuth.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UsageCluster struct for UsageCluster
type UsageCluster struct {
	Id                 string   `json:"id"`
	Size               string   `json:"size"`
	Name               string   `json:"name"`
	Compute            *float32 `json:"compute,omitempty"`
	OutSameRegion      *float32 `json:"outSameRegion,omitempty"`
	OutDifferentRegion *float32 `json:"outDifferentRegion,omitempty"`
	OutInternet        *float32 `json:"outInternet,omitempty"`
}

// NewUsageCluster instantiates a new UsageCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageCluster(id string, size string, name string) *UsageCluster {
	this := UsageCluster{}
	this.Id = id
	this.Size = size
	this.Name = name
	return &this
}

// NewUsageClusterWithDefaults instantiates a new UsageCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageClusterWithDefaults() *UsageCluster {
	this := UsageCluster{}
	return &this
}

// GetId returns the Id field value
func (o *UsageCluster) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UsageCluster) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UsageCluster) SetId(v string) {
	o.Id = v
}

// GetSize returns the Size field value
func (o *UsageCluster) GetSize() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *UsageCluster) GetSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *UsageCluster) SetSize(v string) {
	o.Size = v
}

// GetName returns the Name field value
func (o *UsageCluster) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UsageCluster) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UsageCluster) SetName(v string) {
	o.Name = v
}

// GetCompute returns the Compute field value if set, zero value otherwise.
func (o *UsageCluster) GetCompute() float32 {
	if o == nil || o.Compute == nil {
		var ret float32
		return ret
	}
	return *o.Compute
}

// GetComputeOk returns a tuple with the Compute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageCluster) GetComputeOk() (*float32, bool) {
	if o == nil || o.Compute == nil {
		return nil, false
	}
	return o.Compute, true
}

// HasCompute returns a boolean if a field has been set.
func (o *UsageCluster) HasCompute() bool {
	if o != nil && o.Compute != nil {
		return true
	}

	return false
}

// SetCompute gets a reference to the given float32 and assigns it to the Compute field.
func (o *UsageCluster) SetCompute(v float32) {
	o.Compute = &v
}

// GetOutSameRegion returns the OutSameRegion field value if set, zero value otherwise.
func (o *UsageCluster) GetOutSameRegion() float32 {
	if o == nil || o.OutSameRegion == nil {
		var ret float32
		return ret
	}
	return *o.OutSameRegion
}

// GetOutSameRegionOk returns a tuple with the OutSameRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageCluster) GetOutSameRegionOk() (*float32, bool) {
	if o == nil || o.OutSameRegion == nil {
		return nil, false
	}
	return o.OutSameRegion, true
}

// HasOutSameRegion returns a boolean if a field has been set.
func (o *UsageCluster) HasOutSameRegion() bool {
	if o != nil && o.OutSameRegion != nil {
		return true
	}

	return false
}

// SetOutSameRegion gets a reference to the given float32 and assigns it to the OutSameRegion field.
func (o *UsageCluster) SetOutSameRegion(v float32) {
	o.OutSameRegion = &v
}

// GetOutDifferentRegion returns the OutDifferentRegion field value if set, zero value otherwise.
func (o *UsageCluster) GetOutDifferentRegion() float32 {
	if o == nil || o.OutDifferentRegion == nil {
		var ret float32
		return ret
	}
	return *o.OutDifferentRegion
}

// GetOutDifferentRegionOk returns a tuple with the OutDifferentRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageCluster) GetOutDifferentRegionOk() (*float32, bool) {
	if o == nil || o.OutDifferentRegion == nil {
		return nil, false
	}
	return o.OutDifferentRegion, true
}

// HasOutDifferentRegion returns a boolean if a field has been set.
func (o *UsageCluster) HasOutDifferentRegion() bool {
	if o != nil && o.OutDifferentRegion != nil {
		return true
	}

	return false
}

// SetOutDifferentRegion gets a reference to the given float32 and assigns it to the OutDifferentRegion field.
func (o *UsageCluster) SetOutDifferentRegion(v float32) {
	o.OutDifferentRegion = &v
}

// GetOutInternet returns the OutInternet field value if set, zero value otherwise.
func (o *UsageCluster) GetOutInternet() float32 {
	if o == nil || o.OutInternet == nil {
		var ret float32
		return ret
	}
	return *o.OutInternet
}

// GetOutInternetOk returns a tuple with the OutInternet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsageCluster) GetOutInternetOk() (*float32, bool) {
	if o == nil || o.OutInternet == nil {
		return nil, false
	}
	return o.OutInternet, true
}

// HasOutInternet returns a boolean if a field has been set.
func (o *UsageCluster) HasOutInternet() bool {
	if o != nil && o.OutInternet != nil {
		return true
	}

	return false
}

// SetOutInternet gets a reference to the given float32 and assigns it to the OutInternet field.
func (o *UsageCluster) SetOutInternet(v float32) {
	o.OutInternet = &v
}

func (o UsageCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["size"] = o.Size
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Compute != nil {
		toSerialize["compute"] = o.Compute
	}
	if o.OutSameRegion != nil {
		toSerialize["outSameRegion"] = o.OutSameRegion
	}
	if o.OutDifferentRegion != nil {
		toSerialize["outDifferentRegion"] = o.OutDifferentRegion
	}
	if o.OutInternet != nil {
		toSerialize["outInternet"] = o.OutInternet
	}
	return json.Marshal(toSerialize)
}

type NullableUsageCluster struct {
	value *UsageCluster
	isSet bool
}

func (v NullableUsageCluster) Get() *UsageCluster {
	return v.value
}

func (v *NullableUsageCluster) Set(val *UsageCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageCluster(val *UsageCluster) *NullableUsageCluster {
	return &NullableUsageCluster{value: val, isSet: true}
}

func (v NullableUsageCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
