/*
Exasol SaaS REST-API

## Authentication  The REST API can be used with your Personal Access Token (PAT). You don't know what a PAT is, check our documentation  [here](https://docs.exasol.com/saas/administration/access_mngt/access_token.htm).  After you created a PAT click on Authorize and add your PAT under BearerAuth.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Connections struct for Connections
type Connections struct {
	Dns        string        `json:"dns"`
	Port       int32         `json:"port"`
	Jdbc       string        `json:"jdbc"`
	Ips        ConnectionIPs `json:"ips"`
	DbUsername string        `json:"dbUsername"`
}

// NewConnections instantiates a new Connections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnections(dns string, port int32, jdbc string, ips ConnectionIPs, dbUsername string) *Connections {
	this := Connections{}
	this.Dns = dns
	this.Port = port
	this.Jdbc = jdbc
	this.Ips = ips
	this.DbUsername = dbUsername
	return &this
}

// NewConnectionsWithDefaults instantiates a new Connections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionsWithDefaults() *Connections {
	this := Connections{}
	return &this
}

// GetDns returns the Dns field value
func (o *Connections) GetDns() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dns
}

// GetDnsOk returns a tuple with the Dns field value
// and a boolean to check if the value has been set.
func (o *Connections) GetDnsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dns, true
}

// SetDns sets field value
func (o *Connections) SetDns(v string) {
	o.Dns = v
}

// GetPort returns the Port field value
func (o *Connections) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *Connections) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *Connections) SetPort(v int32) {
	o.Port = v
}

// GetJdbc returns the Jdbc field value
func (o *Connections) GetJdbc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jdbc
}

// GetJdbcOk returns a tuple with the Jdbc field value
// and a boolean to check if the value has been set.
func (o *Connections) GetJdbcOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jdbc, true
}

// SetJdbc sets field value
func (o *Connections) SetJdbc(v string) {
	o.Jdbc = v
}

// GetIps returns the Ips field value
func (o *Connections) GetIps() ConnectionIPs {
	if o == nil {
		var ret ConnectionIPs
		return ret
	}

	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value
// and a boolean to check if the value has been set.
func (o *Connections) GetIpsOk() (*ConnectionIPs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ips, true
}

// SetIps sets field value
func (o *Connections) SetIps(v ConnectionIPs) {
	o.Ips = v
}

// GetDbUsername returns the DbUsername field value
func (o *Connections) GetDbUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DbUsername
}

// GetDbUsernameOk returns a tuple with the DbUsername field value
// and a boolean to check if the value has been set.
func (o *Connections) GetDbUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DbUsername, true
}

// SetDbUsername sets field value
func (o *Connections) SetDbUsername(v string) {
	o.DbUsername = v
}

func (o Connections) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dns"] = o.Dns
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if true {
		toSerialize["jdbc"] = o.Jdbc
	}
	if true {
		toSerialize["ips"] = o.Ips
	}
	if true {
		toSerialize["dbUsername"] = o.DbUsername
	}
	return json.Marshal(toSerialize)
}

type NullableConnections struct {
	value *Connections
	isSet bool
}

func (v NullableConnections) Get() *Connections {
	return v.value
}

func (v *NullableConnections) Set(val *Connections) {
	v.value = val
	v.isSet = true
}

func (v NullableConnections) IsSet() bool {
	return v.isSet
}

func (v *NullableConnections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnections(val *Connections) *NullableConnections {
	return &NullableConnections{value: val, isSet: true}
}

func (v NullableConnections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
