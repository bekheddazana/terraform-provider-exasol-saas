/*
Exasol SaaS REST-API

## Authentication  The REST API can be used with your Personal Access Token (PAT). You don't know what a PAT is, check our documentation  [here](https://docs.exasol.com/saas/administration/access_mngt/access_token.htm).  After you created a PAT click on Authorize and add your PAT under BearerAuth.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Region struct for Region
type Region struct {
	Id              string  `json:"id"`
	Name            string  `json:"name"`
	PriceMultiplier float32 `json:"priceMultiplier"`
	StoragePrice    float32 `json:"storagePrice"`
}

// NewRegion instantiates a new Region object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegion(id string, name string, priceMultiplier float32, storagePrice float32) *Region {
	this := Region{}
	this.Id = id
	this.Name = name
	this.PriceMultiplier = priceMultiplier
	this.StoragePrice = storagePrice
	return &this
}

// NewRegionWithDefaults instantiates a new Region object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionWithDefaults() *Region {
	this := Region{}
	return &this
}

// GetId returns the Id field value
func (o *Region) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Region) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Region) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Region) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Region) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Region) SetName(v string) {
	o.Name = v
}

// GetPriceMultiplier returns the PriceMultiplier field value
func (o *Region) GetPriceMultiplier() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PriceMultiplier
}

// GetPriceMultiplierOk returns a tuple with the PriceMultiplier field value
// and a boolean to check if the value has been set.
func (o *Region) GetPriceMultiplierOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceMultiplier, true
}

// SetPriceMultiplier sets field value
func (o *Region) SetPriceMultiplier(v float32) {
	o.PriceMultiplier = v
}

// GetStoragePrice returns the StoragePrice field value
func (o *Region) GetStoragePrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StoragePrice
}

// GetStoragePriceOk returns a tuple with the StoragePrice field value
// and a boolean to check if the value has been set.
func (o *Region) GetStoragePriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoragePrice, true
}

// SetStoragePrice sets field value
func (o *Region) SetStoragePrice(v float32) {
	o.StoragePrice = v
}

func (o Region) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["priceMultiplier"] = o.PriceMultiplier
	}
	if true {
		toSerialize["storagePrice"] = o.StoragePrice
	}
	return json.Marshal(toSerialize)
}

type NullableRegion struct {
	value *Region
	isSet bool
}

func (v NullableRegion) Get() *Region {
	return v.value
}

func (v *NullableRegion) Set(val *Region) {
	v.value = val
	v.isSet = true
}

func (v NullableRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegion(val *Region) *NullableRegion {
	return &NullableRegion{value: val, isSet: true}
}

func (v NullableRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
