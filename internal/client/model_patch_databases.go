/*
Exasol SaaS REST-API

## Authentication  The REST API can be used with your Personal Access Token (PAT). You don't know what a PAT is, check our documentation  [here](https://docs.exasol.com/saas/administration/access_mngt/access_token.htm).  After you created a PAT click on Authorize and add your PAT under BearerAuth.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PatchDatabases struct for PatchDatabases
type PatchDatabases struct {
	Delete []string `json:"delete"`
	Add    []string `json:"add"`
}

// NewPatchDatabases instantiates a new PatchDatabases object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchDatabases(delete []string, add []string) *PatchDatabases {
	this := PatchDatabases{}
	this.Delete = delete
	this.Add = add
	return &this
}

// NewPatchDatabasesWithDefaults instantiates a new PatchDatabases object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchDatabasesWithDefaults() *PatchDatabases {
	this := PatchDatabases{}
	return &this
}

// GetDelete returns the Delete field value
func (o *PatchDatabases) GetDelete() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value
// and a boolean to check if the value has been set.
func (o *PatchDatabases) GetDeleteOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Delete, true
}

// SetDelete sets field value
func (o *PatchDatabases) SetDelete(v []string) {
	o.Delete = v
}

// GetAdd returns the Add field value
func (o *PatchDatabases) GetAdd() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Add
}

// GetAddOk returns a tuple with the Add field value
// and a boolean to check if the value has been set.
func (o *PatchDatabases) GetAddOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Add, true
}

// SetAdd sets field value
func (o *PatchDatabases) SetAdd(v []string) {
	o.Add = v
}

func (o PatchDatabases) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["delete"] = o.Delete
	}
	if true {
		toSerialize["add"] = o.Add
	}
	return json.Marshal(toSerialize)
}

type NullablePatchDatabases struct {
	value *PatchDatabases
	isSet bool
}

func (v NullablePatchDatabases) Get() *PatchDatabases {
	return v.value
}

func (v *NullablePatchDatabases) Set(val *PatchDatabases) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchDatabases) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchDatabases) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchDatabases(val *PatchDatabases) *NullablePatchDatabases {
	return &NullablePatchDatabases{value: val, isSet: true}
}

func (v NullablePatchDatabases) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchDatabases) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
