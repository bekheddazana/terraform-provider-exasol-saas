/*
Exasol SaaS REST-API

## Authentication  The REST API can be used with your Personal Access Token (PAT). You don't know what a PAT is, check our documentation  [here](https://docs.exasol.com/saas/administration/access_mngt/access_token.htm).  After you created a PAT click on Authorize and add your PAT under BearerAuth.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClusterOverview struct for ClusterOverview
type ClusterOverview struct {
	Total   int32 `json:"total"`
	Running int32 `json:"running"`
}

// NewClusterOverview instantiates a new ClusterOverview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterOverview(total int32, running int32) *ClusterOverview {
	this := ClusterOverview{}
	this.Total = total
	this.Running = running
	return &this
}

// NewClusterOverviewWithDefaults instantiates a new ClusterOverview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterOverviewWithDefaults() *ClusterOverview {
	this := ClusterOverview{}
	return &this
}

// GetTotal returns the Total field value
func (o *ClusterOverview) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ClusterOverview) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ClusterOverview) SetTotal(v int32) {
	o.Total = v
}

// GetRunning returns the Running field value
func (o *ClusterOverview) GetRunning() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Running
}

// GetRunningOk returns a tuple with the Running field value
// and a boolean to check if the value has been set.
func (o *ClusterOverview) GetRunningOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Running, true
}

// SetRunning sets field value
func (o *ClusterOverview) SetRunning(v int32) {
	o.Running = v
}

func (o ClusterOverview) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["running"] = o.Running
	}
	return json.Marshal(toSerialize)
}

type NullableClusterOverview struct {
	value *ClusterOverview
	isSet bool
}

func (v NullableClusterOverview) Get() *ClusterOverview {
	return v.value
}

func (v *NullableClusterOverview) Set(val *ClusterOverview) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterOverview) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterOverview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterOverview(val *ClusterOverview) *NullableClusterOverview {
	return &NullableClusterOverview{value: val, isSet: true}
}

func (v NullableClusterOverview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterOverview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
