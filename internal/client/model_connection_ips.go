/*
Exasol SaaS REST-API

## Authentication  The REST API can be used with your Personal Access Token (PAT). You don't know what a PAT is, check our documentation  [here](https://docs.exasol.com/saas/administration/access_mngt/access_token.htm).  After you created a PAT click on Authorize and add your PAT under BearerAuth.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConnectionIPs struct for ConnectionIPs
type ConnectionIPs struct {
	Private []string `json:"private"`
	Public  []string `json:"public"`
}

// NewConnectionIPs instantiates a new ConnectionIPs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionIPs(private []string, public []string) *ConnectionIPs {
	this := ConnectionIPs{}
	this.Private = private
	this.Public = public
	return &this
}

// NewConnectionIPsWithDefaults instantiates a new ConnectionIPs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionIPsWithDefaults() *ConnectionIPs {
	this := ConnectionIPs{}
	return &this
}

// GetPrivate returns the Private field value
func (o *ConnectionIPs) GetPrivate() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Private
}

// GetPrivateOk returns a tuple with the Private field value
// and a boolean to check if the value has been set.
func (o *ConnectionIPs) GetPrivateOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Private, true
}

// SetPrivate sets field value
func (o *ConnectionIPs) SetPrivate(v []string) {
	o.Private = v
}

// GetPublic returns the Public field value
func (o *ConnectionIPs) GetPublic() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *ConnectionIPs) GetPublicOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Public, true
}

// SetPublic sets field value
func (o *ConnectionIPs) SetPublic(v []string) {
	o.Public = v
}

func (o ConnectionIPs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["private"] = o.Private
	}
	if true {
		toSerialize["public"] = o.Public
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionIPs struct {
	value *ConnectionIPs
	isSet bool
}

func (v NullableConnectionIPs) Get() *ConnectionIPs {
	return v.value
}

func (v *NullableConnectionIPs) Set(val *ConnectionIPs) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionIPs) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionIPs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionIPs(val *ConnectionIPs) *NullableConnectionIPs {
	return &NullableConnectionIPs{value: val, isSet: true}
}

func (v NullableConnectionIPs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionIPs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
